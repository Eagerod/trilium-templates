const fs = require('fs');
const url = require('url');

const request = require('request-promise-native');

const triliumUrl = url.parse(process.env.TRILIUM_URL);
const {protocol, host, auth} = triliumUrl;

const API_HOST = protocol + '//' + host;
const USERNAME = auth.split(":")[0];
const PASSWORD = auth.split(":")[1];

class TriliumNote {
    constructor(noteJson) {
        this._id = noteJson.id;
        this._path = noteJson.note;
        this._parent = noteJson.parent;
        this._name = noteJson.name;
    }
}


class TriliumApiSender {
    constructor(username, password, hostname) {
        this._username = username;
        this._password = password;
        this._hostname = hostname;
        this._authCookie = null;
    }

    // Use the login route to get an authCookie.
    async login() {
        const requestObj = {
            uri: this._hostname + '/login',
            method: 'POST',
            form: {
                username: this._username,
                password: this._password
            },
            resolveWithFullResponse: true
        };

        try {
           const response = await request(requestObj);
        } catch(err) {
            // I don't know why this is an actual error. This should just be
            //   an http response with the 302 status code?
            if (err.response && err.response.headers && err.response.headers['set-cookie']) {
                this._authCookie = err.response.headers['set-cookie'][0];
                return;
            }

            throw err;
        }
    }

    async runScriptOnBackend(scriptString, params = []) {
        if (!this._authCookie) {
            await this.login(USERNAME, PASSWORD)
        }

        const requestObj = {
            uri: this._hostname + '/api/script/exec',
            method: 'POST',
            headers: {
                "Cookie": this._authCookie,
                "Content-Type": "application/json"
            },
            json: {
                // Using root may be unsafe. Maybe create a dummy note in
                //   advance?
                currentNoteId: "root",
                params: params,
                script: scriptString,
                originEntityName: "notes"
            },
            resolveWithFullResponse: true
        };

        const response = await request(requestObj);
        return response.body && response.body.executionResult;
    }
}

(async function() {
    const apiClient = new TriliumApiSender(USERNAME, PASSWORD, API_HOST);

    // Fetch notes by id
    const fetchByIdScript = 'async (label) => {\n    console.log("here");\n    return await api.getNoteWithLabel("autogenerated-note-id", label);\n}';

    console.log(await apiClient.runScriptOnBackend(fetchByIdScript));

    // Read notes from directory, and upload them
})();